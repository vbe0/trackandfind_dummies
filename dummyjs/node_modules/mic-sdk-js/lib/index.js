'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MIC = function () {
  function MIC() {
    _classCallCheck(this, MIC);

    this._host = null;
    this._AWS = _awsSdk2.default;
    this._manifest = null;
    this._account = null;
  }

  /* Load AWS manifest */


  _createClass(MIC, [{
    key: 'init',
    value: function init() {
      var _this = this;

      var hostname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      this._host = hostname;
      return this._loadManifest().then(function (manifest) {
        return _this._getCredentials();
      }).then(function (creds) {
        return Promise.resolve(_this._manifest, creds);
      }).catch(function (err) {
        _this._host = null;
        return Promise.reject(err);
      });
    }

    /* Parse different formats returned by a lambda call */

  }, {
    key: '_parseError',
    value: function _parseError(err) {
      if (err && err.errorMessage) {
        return JSON.parse(err.errorMessage).message;
      } else if (typeof err === 'string') {
        return JSON.parse(err);
      } else {
        return err;
      }
    }

    /* Determine if an error returned by a lambda call is an auth error */

  }, {
    key: '_isAuthError',
    value: function _isAuthError(err) {
      var authErrors = /No data|Token is expired|Invalid login token|Missing credentials in config|is not authorized to perform|Not Found/;
      return typeof err === 'string' && err.match(authErrors) || typeof err.message === 'string' && err.message.match(authErrors);
    }

    /* Fetch manifest from correct URL */

  }, {
    key: '_loadManifest',
    value: function _loadManifest() {
      var _this2 = this;

      var manifest_url = 'https://1u31fuekv5.execute-api.eu-west-1.amazonaws.com/prod/manifest/?hostname=' + this._host;

      return (0, _axios2.default)(manifest_url).then(function (res) {
        var manifest = res.data;
        _this2._manifest = manifest;
        _this2._AWS.config.region = manifest.Region;
        return Promise.resolve(manifest);
      });
    }
  }, {
    key: '_assertInited',
    value: function _assertInited() {
      return this._host !== null && this._manifest !== null;
    }

    /* Invoke will execute a AWS lambda function */

  }, {
    key: 'invoke',
    value: function invoke(function_name, payload) {
      var _this3 = this;

      if (!this._assertInited()) return Promise.reject('Error: MIC not initialized!');

      /* Create an instance of the lambda call for
       * potentially later usage.
       */
      var invoke_instance = function invoke_instance() {
        return _this3._lambda(function_name, payload);
      };

      /* Run it, but catch errors */
      return invoke_instance().catch(function (err) {

        /* Refresh token if auth error */
        if (_this3._isAuthError(err)) {
          return _this3._refreshCredentials().then(invoke_instance);
        }
        return Promise.reject(err);
      });
    }

    /* Execute a Cloud Connect Lambda function */

  }, {
    key: '_lambda',
    value: function _lambda(function_name, payload) {
      var _this4 = this;

      return new Promise(function (resolve, reject) {

        /* Lambda parameters */
        var params = {
          FunctionName: _this4._manifest[function_name],
          Payload: JSON.stringify(payload)

          /* Invoke the lambda function */
        };var lambda = new _this4._AWS.Lambda();
        lambda.invoke(params, function (err, res) {

          /* Parse response */
          try {
            /* Got error */
            if (err) reject(_this4._parseError(err));
            /* Empty response */
            if (!res || !res.Payload) reject('No data');
            /* No error, got a response */
            var _payload = JSON.parse(res.Payload);
            /* Got an error message in response */
            if (res.FunctionError || _payload.errorMessage) reject(_this4._parseError(_payload));
            /* OK */
            resolve(_payload);
            /* Unexpected error */
          } catch (err) {
            reject(err);
          }
        });
      });
    }

    /* Get AWS Cognito Credentials */

  }, {
    key: '_getCredentials',
    value: function _getCredentials() {
      var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      /* Don't fetch credentials if we already have them */
      //if (token == null && this._AWS.config.credentials !== null) return Promise.resolve()

      this._AWS.config.credentials = new _awsSdk2.default.CognitoIdentityCredentials({
        IdentityPoolId: this._manifest.IdentityPool,
        Logins: _defineProperty({}, 'cognito-idp.' + this._manifest.Region + '.amazonaws.com/' + this._manifest.UserPool, token)
      });

      /* Clear previously cached ID if token is absent */
      if (!token) this._AWS.config.credentials.clearCachedId();

      return this._AWS.config.credentials.getPromise();
    }
  }, {
    key: '_refreshCredentials',
    value: function _refreshCredentials() {
      var _this5 = this;

      var account = this._account;

      if (typeof account === 'undefined') throw new Error('No Refresh Token');

      var refreshToken = JSON.parse(account).credentials.refreshToken;

      if (!refreshToken) throw new Error('No Refresh Token');

      this._AWS.config.credentials = new _awsSdk2.default.CognitoIdentityCredentials({
        IdentityPoolId: this._manifest.IdentityPool
      });
      this._AWS.config.credentials.clearCachedId();

      var refreshPayload = {
        action: 'REFRESH',
        attributes: {
          refreshToken: refreshToken
        }
      };
      return this.invoke('AuthLambda', refreshPayload).then(function (account) {
        _this5._account = account;
        return _this5._getCredentials(account.credentials.token);
      }).then(function () {
        return Promise.resolve(_this5._account);
      });
    }

    /* Perform steps needed to create a Cognito Identity */

  }, {
    key: 'login',
    value: function login(username, password) {
      var _this6 = this;

      if (!this._assertInited()) return Promise.reject('Error: MIC not initialized!');

      /* Invoke an AuthLambda call to obtain an
       * authentication token from Cloud Connect.
       */
      var loginPayload = {
        action: 'LOGIN',
        attributes: {
          userName: username,
          password: password
        }
      };
      return this.invoke('AuthLambda', loginPayload).then(function (account) {
        _this6._account = account;

        /* Get AWS Cognito raised privilege credential
         * using the obtained MIC auth token.
         */
        return _this6._getCredentials(account.credentials.token);
      }).then(function () {
        return Promise.resolve(_this6._account);
      });
    }
  }]);

  return MIC;
}();

exports.default = MIC;